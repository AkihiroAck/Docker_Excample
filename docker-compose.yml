services:
  # Определение контейнера для веб-приложения
  web:
    build: ./backend  # Указывает директорию (./backend), где находится Dockerfile для сборки образа.
    container_name: django  # Указывает название контейнера, которое будет использоваться при запуске. Это имя можно использовать для управления контейнером (например, остановка или перезапуск).
    volumes:
      - ./backend/:/usr/src/app/  # Монтирует локальную директорию './backend' в контейнер на путь '/usr/src/app/', что позволяет разработчику работать с кодом на локальной машине и сразу видеть изменения в контейнере.
    ports:
      - 8000:8000  # Маппит порт 8000 контейнера на порт 8000 хоста. Это нужно, чтобы приложение было доступно на localhost:8000 на хосте.
    env_file:
      - .env  # Загружает переменные окружения из файла .env в контейнер. Это позволяет централизованно управлять конфигурацией (например, учетными данными для базы данных).
    depends_on:
      - db  # Обеспечивает, что контейнер с приложением web будет запускаться только после контейнера с базой данных db.

  # Определение контейнера для базы данных PostgreSQL
  db:
    image: postgres:17.4  # Использует официальный образ PostgreSQL версии 17.4. Этот образ автоматически запускает PostgreSQL.
    restart: always  # Контейнер будет автоматически перезапускаться при сбоях или при перезагрузке Docker.
    container_name: postgresql  # Указывает название контейнера, которое будет использоваться при запуске. Это имя можно использовать для управления контейнером (например, остановка или перезапуск).
    volumes:
      - postgres_data:/var/lib/postgresql/data  # Монтирует том 'postgres_data' на путь /var/lib/postgresql/data, где PostgreSQL хранит свои данные.
    environment:
      POSTGRES_USER: ${POSTGRES_USER}  # Устанавливает переменную окружения POSTGRES_USER, которая будет использоваться для создания пользователя базы данных. Значение будет взято из .env файла.
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}  # Устанавливает переменную окружения POSTGRES_PASSWORD, которая будет использоваться для создания пароля для пользователя. Значение будет взято из .env файла.
      POSTGRES_DB: ${POSTGRES_DB}  # Устанавливает переменную окружения POSTGRES_DB, которая задает имя базы данных. Значение будет взято из .env файла.
    ports:
      - 5432:5432  # Маппит порт 5432 контейнера с базой данных на порт 5432 хоста. Это стандартный порт PostgreSQL, через который другие приложения могут подключаться к базе данных.

  # Определение контейнера для административной панели Adminer
  adminer:
    image: adminer  # Использует официальный образ Adminer, который предоставляет веб-интерфейс для работы с базой данных.
    restart: always  # Контейнер будет автоматически перезапускаться при сбоях или при перезагрузке Docker.
    container_name: adminer  # Указывает название контейнера, которое будет использоваться при запуске. Это имя можно использовать для управления контейнером (например, остановка или перезапуск).
    ports:
      - 8080:8080  # Маппит порт 8080 контейнера на порт 8080 хоста. Это необходимо для доступа к Adminer через веб-браузер (например, по адресу http://localhost:8080).

# Определение томов для хранения данных
volumes:
  postgres_data:  # Определяет том с именем 'postgres_data', который будет использоваться для хранения данных PostgreSQL, чтобы они сохранялись между перезапусками контейнеров.
