# Используем официальный образ Python версии 3.12.10
FROM python:3.12.10
  # Этот образ уже содержит Python 3.12.10 и все необходимые для его работы компоненты.
  # Это стандартный подход для запуска приложений на Python в Docker.

# Устанавливаем рабочую директорию внутри контейнера
WORKDIR /usr/src/app
  # Эта команда устанавливает рабочую директорию контейнера, куда будут копироваться файлы и в которой будет выполняться код.
  # Все последующие команды будут выполняться внутри этой директории.

# Обновляем pip до последней версии
RUN pip install --upgrade pip
  # Обновление pip перед установкой зависимостей гарантирует, что у нас будет самая последняя версия, что помогает избежать проблем с установкой пакетов.

# Копируем файл requirements.txt (содержит список зависимостей) в рабочую директорию контейнера
COPY ./requirements.txt .
  # Команда копирует файл 'requirements.txt' из локальной директории в текущую рабочую директорию контейнера (в данном случае в /usr/src/app).

# Устанавливаем все зависимости из файла requirements.txt
RUN pip install --no-cache-dir -r requirements.txt
  # Установка зависимостей Python из 'requirements.txt' без кэширования (опция --no-cache-dir снижает размер контейнера, удаляя кеш после установки).

# Копируем файл entrypoint.sh в рабочую директорию контейнера
COPY ./entrypoint.sh .
  # Команда копирует скрипт 'entrypoint.sh', который будет использоваться для старта контейнера, в контейнер.

# Убираем символы возврата каретки (CR) из скрипта entrypoint.sh для корректной работы в Linux-среде
RUN sed -i 's/\r$//g' /usr/src/app/entrypoint.sh
  # Команда sed используется для удаления лишних символов, которые могут возникать при копировании файлов из Windows в Linux (возврат каретки \r).

# Даем права на выполнение скрипту entrypoint.sh
RUN chmod +x /usr/src/app/entrypoint.sh
  # Устанавливаем разрешения на выполнение скрипта 'entrypoint.sh', чтобы его можно было запускать как исполняемый файл.

# Копируем все файлы и папки из текущей директории в рабочую директорию контейнера
COPY . .
  # Эта команда копирует весь код и файлы из локальной директории в контейнер. Это нужно для того, чтобы все исходники проекта оказались внутри контейнера.

# Открываем порт 8000 контейнера, чтобы приложение было доступно извне
EXPOSE 8000
  # Команда EXPOSE сообщает Docker, что контейнер будет слушать на порту 8000, что нужно для того, чтобы доступ к приложению был возможен через этот порт.

# Устанавливаем скрипт entrypoint.sh как точку входа (начальный скрипт) для контейнера
ENTRYPOINT ["/usr/src/app/entrypoint.sh"]
  # Этот скрипт будет выполняться при старте контейнера, и он может использоваться для настройки среды или для запуска приложения.
  # Это позволяет контролировать, что будет происходить при запуске контейнера.
